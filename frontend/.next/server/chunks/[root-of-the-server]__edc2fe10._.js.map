{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///home/amarjay/Desktop/code/beshir/fuel-station-monitor/frontend/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///home/amarjay/Desktop/code/beshir/fuel-station-monitor/frontend/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport { prisma } from '../../../../lib/prisma';\n\ninterface ExternalApiResponse {\n  status_code: number;\n  data: {\n    refresh_token: string;\n    access_token: string;\n    user_record: {\n      id: number;\n      creation_date: string;\n      email: string;\n      roles: {\n        id: number;\n        name: string;\n      };\n      associated_station: number | null;\n    };\n  };\n  message: string;\n}\n\n// Store user token in database for session persistence\nasync function storeUserToken(userId: string, accessToken: string, refreshToken: string) {\n  try {\n    const expiresAt = new Date(Date.now() + (8 * 60 * 60 * 1000)); // 8 hours\n    \n    await prisma.systemCache.upsert({\n      where: { key: `user_session_${userId}` },\n      update: {\n        value: JSON.stringify({\n          access_token: accessToken,\n          refresh_token: refreshToken,\n          created_at: new Date().toISOString()\n        }),\n        expires_at: expiresAt,\n        updated_at: new Date()\n      },\n      create: {\n        key: `user_session_${userId}`,\n        value: JSON.stringify({\n          access_token: accessToken,\n          refresh_token: refreshToken,\n          created_at: new Date().toISOString()\n        }),\n        expires_at: expiresAt\n      }\n    });\n    \n    console.log(`üóÑÔ∏è User session stored for user ${userId}`);\n  } catch (error) {\n    console.warn('Failed to store user session:', error);\n    // Non-fatal error, continue without DB storage\n  }\n}\n\n// POST /api/auth/login\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json();\n    \n    if (!email || !password) {\n      return NextResponse.json({\n        success: false,\n        error: 'Email and password are required'\n      }, { status: 400 });\n    }\n\n\tconst response = await fetch('http://78.189.54.28:3800/auth/login', {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Accept': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({ email, password }),\n\t\tcache: 'no-store' // Don't cache login requests\n\t});\n\n\tif (!response.ok) {\n\t\tconst errorData = await response.json();\n\t\tconsole.error('Login failed:', errorData);\n\t\treturn NextResponse.json({\n\t\t\tsuccess: false,\n\t\t\terror: 'Invalid credentials'\n\t\t}, { status: 401 });\n\t}\n\n\tconst res: ExternalApiResponse = await response.json();\n\tconst data = res.data;\n\t\n\t// Store user session in database for persistence\n\tawait storeUserToken(\n\t\tdata.user_record.id.toString(), \n\t\tdata.access_token, \n\t\tdata.refresh_token\n\t);\n\t\n\t// Create our own JWT for client-side authentication\n\tconst clientToken = jwt.sign(\n\t\t{\n\t\t\tuserId: data.user_record.id,\n\t\t\temail: data.user_record.email,\n\t\t\trole: data.user_record.roles.name === \"SuperAdmin\" ? \"System Administrator\" : data.user_record.roles.name,\n\t\t\tcanAccessAll: data.user_record.roles.name === \"SuperAdmin\",\n\t\t\tstationId: data.user_record.associated_station,\n\t\t\texternalUserId: data.user_record.id\n\t\t},\n\t\tprocess.env.JWT_SECRET || 'your-secret-key',\n\t\t{ expiresIn: '8h' }\n\t);\n\t\n\tconsole.log(`‚úÖ User authenticated: ${email} (${data.user_record.roles.name})`);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        token: clientToken, // Our JWT token for client\n        externalToken: data.access_token, // External API token (optional to return)\n        user: {\n          id: data.user_record.id,\n          email: data.user_record.email,\n          role: data.user_record.roles.name === \"SuperAdmin\" ? \"System Administrator\" : data.user_record.roles.name,\n          canAccessAll: data.user_record.roles.name === \"SuperAdmin\",\n          stationId: data.user_record.associated_station\n        }\n      },\n      message: `Welcome ${data.user_record.roles.name}!`\n    });\n\n  } catch (error) {\n    console.error('Auth error:', error);\n    return NextResponse.json({\n      success: false,\n      error: 'Authentication failed'\n    }, { status: 500 });\n  }\n}\n\n// POST /api/auth/logout\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Extract user info from JWT token\n    const authHeader = request.headers.get('authorization');\n    const token = authHeader?.replace('Bearer ', '');\n    \n    if (token) {\n      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;\n      const userId = decoded.userId;\n      \n      if (userId) {\n        // Clear user session from database\n        try {\n          await prisma.systemCache.deleteMany({\n            where: { key: `user_session_${userId}` }\n          });\n          console.log(`üóëÔ∏è User session cleared for user ${userId}`);\n        } catch (error) {\n          console.warn('Failed to clear user session:', error);\n        }\n      }\n    }\n    \n    return NextResponse.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  } catch (error) {\n    console.error('Logout error:', error);\n    return NextResponse.json({\n      success: true,\n      message: 'Logged out successfully'\n    });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}