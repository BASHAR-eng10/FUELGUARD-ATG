{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bashar/Desktop/fuel_monitor/fuel-station-monitor/frontend/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/bashar/Desktop/fuel_monitor/fuel-station-monitor/frontend/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport jwt from 'jsonwebtoken';\r\nimport { prisma } from '../../../../lib/prisma';\r\n\r\ninterface ExternalApiResponse {\r\n  status_code: number;\r\n  data: {\r\n    refresh_token: string;\r\n    access_token: string;\r\n    user_record: {\r\n      id: number;\r\n      creation_date: string;\r\n      email: string;\r\n      roles: {\r\n        id: number;\r\n        name: string;\r\n      };\r\n      associated_station: number | null;\r\n    };\r\n  };\r\n  message: string;\r\n}\r\n\r\n// Store user token in database for session persistence\r\nasync function storeUserToken(userId: string, accessToken: string, refreshToken: string) {\r\n  try {\r\n    const expiresAt = new Date(Date.now() + (8 * 60 * 60 * 1000)); // 8 hours\r\n    \r\n    await prisma.systemCache.upsert({\r\n      where: { key: `user_session_${userId}` },\r\n      update: {\r\n        value: JSON.stringify({\r\n          access_token: accessToken,\r\n          refresh_token: refreshToken,\r\n          created_at: new Date().toISOString()\r\n        }),\r\n        expires_at: expiresAt,\r\n        updated_at: new Date()\r\n      },\r\n      create: {\r\n        key: `user_session_${userId}`,\r\n        value: JSON.stringify({\r\n          access_token: accessToken,\r\n          refresh_token: refreshToken,\r\n          created_at: new Date().toISOString()\r\n        }),\r\n        expires_at: expiresAt\r\n      }\r\n    });\r\n    \r\n    console.log(`üóÑÔ∏è User session stored for user ${userId}`);\r\n  } catch (error) {\r\n    console.warn('Failed to store user session:', error);\r\n    // Non-fatal error, continue without DB storage\r\n  }\r\n}\r\n\r\n// POST /api/auth/login\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { email, password } = await request.json();\r\n    \r\n    if (!email || !password) {\r\n      return NextResponse.json({\r\n        success: false,\r\n        error: 'Email and password are required'\r\n      }, { status: 400 });\r\n    }\r\n\r\n\tconst response = await fetch('http://78.189.54.28:3800/auth/login', {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify({ email, password }),\r\n\t\tcache: 'no-store' // Don't cache login requests\r\n\t});\r\n\r\n\tif (!response.ok) {\r\n\t\tconst errorData = await response.json();\r\n\t\tconsole.error('Login failed:', errorData);\r\n\t\treturn NextResponse.json({\r\n\t\t\tsuccess: false,\r\n\t\t\terror: 'Invalid credentials'\r\n\t\t}, { status: 401 });\r\n\t}\r\n\r\n\tconst res: ExternalApiResponse = await response.json();\r\n\tconst data = res.data;\r\n\t\r\n\t// Store user session in database for persistence\r\n\tawait storeUserToken(\r\n\t\tdata.user_record.id.toString(), \r\n\t\tdata.access_token, \r\n\t\tdata.refresh_token\r\n\t);\r\n\t\r\n\t// Create our own JWT for client-side authentication\r\n\tconst clientToken = jwt.sign(\r\n\t\t{\r\n\t\t\tuserId: data.user_record.id,\r\n\t\t\temail: data.user_record.email,\r\n\t\t\trole: data.user_record.roles.name === \"SuperAdmin\" ? \"System Administrator\" : data.user_record.roles.name,\r\n\t\t\tcanAccessAll: data.user_record.roles.name === \"SuperAdmin\",\r\n\t\t\tstationId: data.user_record.associated_station,\r\n\t\t\texternalUserId: data.user_record.id\r\n\t\t},\r\n\t\tprocess.env.JWT_SECRET || 'your-secret-key',\r\n\t\t{ expiresIn: '8h' }\r\n\t);\r\n\t\r\n\tconsole.log(`‚úÖ User authenticated: ${email} (${data.user_record.roles.name})`);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: {\r\n        token: clientToken, // Our JWT token for client\r\n        externalToken: data.access_token, // External API token (optional to return)\r\n        user: {\r\n          id: data.user_record.id,\r\n          email: data.user_record.email,\r\n          role: data.user_record.roles.name === \"SuperAdmin\" ? \"System Administrator\" : data.user_record.roles.name,\r\n          canAccessAll: data.user_record.roles.name === \"SuperAdmin\",\r\n          stationId: data.user_record.associated_station\r\n        }\r\n      },\r\n      message: `Welcome ${data.user_record.roles.name}!`\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Auth error:', error);\r\n    return NextResponse.json({\r\n      success: false,\r\n      error: 'Authentication failed'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST /api/auth/logout\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    // Extract user info from JWT token\r\n    const authHeader = request.headers.get('authorization');\r\n    const token = authHeader?.replace('Bearer ', '');\r\n    \r\n    if (token) {\r\n      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;\r\n      const userId = decoded.userId;\r\n      \r\n      if (userId) {\r\n        // Clear user session from database\r\n        try {\r\n          await prisma.systemCache.deleteMany({\r\n            where: { key: `user_session_${userId}` }\r\n          });\r\n          console.log(`üóëÔ∏è User session cleared for user ${userId}`);\r\n        } catch (error) {\r\n          console.warn('Failed to clear user session:', error);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Logged out successfully'\r\n    });\r\n  } catch (error) {\r\n    console.error('Logout error:', error);\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Logged out successfully'\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}