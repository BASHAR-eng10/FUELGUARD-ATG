{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///home/amarjay/Desktop/code/beshir/fuel-station-monitor/frontend/src/lib/middleware/auth.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport jwt from 'jsonwebtoken';\n\nexport interface AuthenticatedUser {\n  userId: number;\n  email: string;\n  role: string;\n  canAccessAll: boolean;\n  stationId: number | null;\n  externalUserId: number;\n}\n\nexport function verifyToken(request: NextRequest): AuthenticatedUser {\n  const authHeader = request.headers.get('authorization');\n  const token = authHeader?.replace('Bearer ', '');\n  \n  if (!token) {\n    throw new Error('Access denied. No token provided.');\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as AuthenticatedUser;\n    return decoded;\n  } catch (error) {\n    throw new Error('Invalid token.');\n  }\n}\n"],"names":[],"mappings":";;;AACA;;AAWO,SAAS,YAAY,OAAoB;IAC9C,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;IACvC,MAAM,QAAQ,YAAY,QAAQ,WAAW;IAE7C,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI;QACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAC5D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///home/amarjay/Desktop/code/beshir/fuel-station-monitor/frontend/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///home/amarjay/Desktop/code/beshir/fuel-station-monitor/frontend/src/lib/auth/tokenManager.ts"],"sourcesContent":["// src/lib/auth/tokenManager.ts - User token management utilities\n// \"use server\"\nimport { prisma } from '../prisma';\nimport jwt from 'jsonwebtoken';\n\ninterface StoredSession {\n  access_token: string;\n  refresh_token: string;\n  created_at: string;\n}\n\n// Get user's external API tokens from database\nexport async function getUserTokens(userId: string): Promise<StoredSession | null> {\n  try {\n    const session = await prisma.systemCache.findUnique({\n      where: { \n        key: `user_session_${userId}`,\n      },\n      select: {\n        value: true,\n        expires_at: true\n      }\n    });\n    \n    if (session && session.expires_at && session.expires_at > new Date()) {\n      const tokens: StoredSession = JSON.parse(session.value);\n      console.log(`üîë Retrieved tokens for user ${userId}`);\n      return tokens;\n    }\n    \n    console.log(`‚ö†Ô∏è No valid session found for user ${userId}`);\n    return null;\n  } catch (error) {\n    console.warn('Failed to get user tokens:', error);\n    return null;\n  }\n}\n\n// Extract user ID from JWT token\nexport function getUserIdFromToken(authHeader: string | null): string | null {\n  try {\n    const token = authHeader?.replace('Bearer ', '');\n    if (!token) return null;\n    \n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;\n    return decoded.userId?.toString() || null;\n  } catch (error) {\n    console.warn('Failed to decode token:', error);\n    return null;\n  }\n}\n\n// Make authenticated request to external API using user's stored tokens\nexport async function makeAuthenticatedExternalRequest(\n  userId: string, \n  endpoint: string, \n  options: RequestInit = {}\n) {\n  const tokens = await getUserTokens(userId);\n  \n  if (!tokens) {\n    throw new Error('No valid session found. Please login again.');\n  }\n  \n  const url = `${process.env.EXTERNAL_API_URL || 'http://78.189.54.28:3800'}${endpoint}`;\n\tconsole.log(`Making request to ${url} with token: ${tokens.access_token}`);\n\n\toptions.headers = {\n\t\t'Content-Type': 'application/json',\n\t\t'Accept': 'application/json',\n\t\t'Authorization': `${tokens.access_token}`,\n\t\t...options.headers\n\t};\n\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    if (response.status === 401) {\n      // Token expired, could implement refresh logic here\n      throw new Error('Session expired. Please login again.');\n    }\n    throw new Error(`Request failed: ${response.status} ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n// Clear user session\nexport async function clearUserSession(userId: string): Promise<void> {\n  try {\n    await prisma.systemCache.deleteMany({\n      where: { key: `user_session_${userId}` }\n    });\n    console.log(`üóëÔ∏è Session cleared for user ${userId}`);\n  } catch (error) {\n    console.warn('Failed to clear user session:', error);\n  }\n}\n\n// Check if user session is valid\nexport async function isSessionValid(userId: string): Promise<boolean> {\n  const tokens = await getUserTokens(userId);\n  return tokens !== null;\n}\n"],"names":[],"mappings":"AAAA,iEAAiE;AACjE,eAAe;;;;;;;;AACf;AACA;;;AASO,eAAe,cAAc,MAAc;IAChD,IAAI;QACF,MAAM,UAAU,MAAM,kIAAA,CAAA,SAAM,CAAC,WAAW,CAAC,UAAU,CAAC;YAClD,OAAO;gBACL,KAAK,CAAC,aAAa,EAAE,QAAQ;YAC/B;YACA,QAAQ;gBACN,OAAO;gBACP,YAAY;YACd;QACF;QAEA,IAAI,WAAW,QAAQ,UAAU,IAAI,QAAQ,UAAU,GAAG,IAAI,QAAQ;YACpE,MAAM,SAAwB,KAAK,KAAK,CAAC,QAAQ,KAAK;YACtD,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,QAAQ;YACpD,OAAO;QACT;QAEA,QAAQ,GAAG,CAAC,CAAC,mCAAmC,EAAE,QAAQ;QAC1D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,8BAA8B;QAC3C,OAAO;IACT;AACF;AAGO,SAAS,mBAAmB,UAAyB;IAC1D,IAAI;QACF,MAAM,QAAQ,YAAY,QAAQ,WAAW;QAC7C,IAAI,CAAC,OAAO,OAAO;QAEnB,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAC5D,OAAO,QAAQ,MAAM,EAAE,cAAc;IACvC,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,2BAA2B;QACxC,OAAO;IACT;AACF;AAGO,eAAe,iCACpB,MAAc,EACd,QAAgB,EAChB,UAAuB,CAAC,CAAC;IAEzB,MAAM,SAAS,MAAM,cAAc;IAEnC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,gBAAgB,IAAI,6BAA6B,UAAU;IACvF,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,IAAI,aAAa,EAAE,OAAO,YAAY,EAAE;IAEzE,QAAQ,OAAO,GAAG;QACjB,gBAAgB;QAChB,UAAU;QACV,iBAAiB,GAAG,OAAO,YAAY,EAAE;QACzC,GAAG,QAAQ,OAAO;IACnB;IAEC,MAAM,WAAW,MAAM,MAAM,KAAK;IAElC,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,IAAI,SAAS,MAAM,KAAK,KAAK;YAC3B,oDAAoD;YACpD,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;IAC7E;IAEA,OAAO,SAAS,IAAI;AACtB;AAGO,eAAe,iBAAiB,MAAc;IACnD,IAAI;QACF,MAAM,kIAAA,CAAA,SAAM,CAAC,WAAW,CAAC,UAAU,CAAC;YAClC,OAAO;gBAAE,KAAK,CAAC,aAAa,EAAE,QAAQ;YAAC;QACzC;QACA,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,QAAQ;IACtD,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,iCAAiC;IAChD;AACF;AAGO,eAAe,eAAe,MAAc;IACjD,MAAM,SAAS,MAAM,cAAc;IACnC,OAAO,WAAW;AACpB","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/amarjay/Desktop/code/beshir/fuel-station-monitor/frontend/src/app/api/stations/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { verifyToken } from '../../../lib/middleware/auth';\nimport { makeAuthenticatedExternalRequest } from '../../../lib/auth/tokenManager';\n\n// GET /api/stations - Get all stations using user's stored tokens\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify user token\n    const user = verifyToken(request);\n    console.log(`üîê Authenticated user: ${user.email} (${user.role})`);\n\n    // Make request to external API using user's stored tokens\n    const stations = await makeAuthenticatedExternalRequest(\n      user.userId.toString(),\n      '/stationinfo/all'\n    );\n\t\tconsole.log(stations)\n    \n    return NextResponse.json({\n      success: true,\n      data: stations.data || stations,\n      count: Array.isArray(stations.data) ? stations.data.length : Array.isArray(stations) ? stations.length : 0,\n      source: 'external_api_user_authenticated',\n      timestamp: new Date().toISOString(),\n      user: {\n        email: user.email,\n        role: user.role\n      }\n    });\n  } catch (error: any) {\n    console.error('Stations API error:', error);\n    \n    if (error.message.includes('token') || error.message.includes('Session')) {\n      return NextResponse.json({\n        success: false,\n        error: error.message\n      }, { status: 401 });\n    }\n    \n    return NextResponse.json({\n      success: false,\n      error: 'Failed to fetch stations',\n      details: error.message\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,oBAAoB;QACpB,MAAM,OAAO,CAAA,GAAA,8IAAA,CAAA,cAAW,AAAD,EAAE;QACzB,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;QAEjE,0DAA0D;QAC1D,MAAM,WAAW,MAAM,CAAA,GAAA,gJAAA,CAAA,mCAAgC,AAAD,EACpD,KAAK,MAAM,CAAC,QAAQ,IACpB;QAEJ,QAAQ,GAAG,CAAC;QAEV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,SAAS,IAAI,IAAI;YACvB,OAAO,MAAM,OAAO,CAAC,SAAS,IAAI,IAAI,SAAS,IAAI,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,SAAS,MAAM,GAAG;YACzG,QAAQ;YACR,WAAW,IAAI,OAAO,WAAW;YACjC,MAAM;gBACJ,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACjB;QACF;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uBAAuB;QAErC,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY;YACxE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO,MAAM,OAAO;YACtB,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,SAAS,MAAM,OAAO;QACxB,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}