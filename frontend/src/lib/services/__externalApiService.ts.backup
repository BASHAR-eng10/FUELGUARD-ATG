// Simplified external API service without database dependencies
interface AuthData {
  data?: {
    access_token?: string;
    token?: string;
  };
  access_token?: string;
  token?: string;
}

// Configuration
const baseURL = process.env.EXTERNAL_API_URL || 'http://server.oktin.ak4tek.com:3950';
const email = process.env.EXTERNAL_API_EMAIL;
const password = process.env.EXTERNAL_API_PASSWORD;

// In-memory token storage (simplified for order analysis)
let cachedToken: { token: string; expires: Date } | null = null;

async function login(): Promise<string> {
  const response = await fetch(`${baseURL}/auth/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ email, password }),
    cache: 'no-store'
  });

  if (!response.ok) {
    throw new Error(`Login failed: ${response.status} ${response.statusText}`);
  }

  const data: AuthData = await response.json();
  let token: string | null = null;
  
  if (data?.data?.access_token) {
    token = data.data.access_token;
  } else if (data?.access_token) {
    token = data.access_token;
  }

  if (!token) {
    throw new Error('No valid token found in authentication response');
  }

  // Store in memory
  cachedToken = {
    token,
    expires: new Date(Date.now() + (50 * 60 * 1000)) // 50 minutes
  };

  return token;
}

async function getAuthToken(): Promise<string> {
  if (cachedToken && cachedToken.expires > new Date()) {
    return cachedToken.token;
  }
  
  if (!email || !password) {
    throw new Error('External API credentials not configured');
  }

  return await login();
}

async function makeRequest(endpoint: string, options: RequestInit = {}) {
  const token = await getAuthToken();
  
  const url = `${baseURL}${endpoint}`;
  const fetchOptions: RequestInit = {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Authorization': `Bearer ${token}`,
      ...options.headers,
    }
  };

  const response = await fetch(url, fetchOptions);
  
  if (!response.ok) {
    if (response.status === 401) {
      cachedToken = null; // Clear cached token
      throw new Error('Token expired');
    }
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
  
  return await response.json();
}

export async function getTankInfo() {
  const data = await makeRequest('/ak4tek/tanks/', { method: 'GET' });
  return data?.data || data;
}

export async function getStationInfo() {
  const data = await makeRequest('/stationinfo/all', { method: 'GET' });
  return data?.data || data;
}

export async function healthCheck() {
  try {
    if (!email || !password) {
      return { status: 'not_configured', message: 'External API credentials not configured' };
    }
    await getAuthToken();
    return { status: 'connected', message: 'External API is accessible' };
  } catch (error) {
    return { status: 'error', message: error instanceof Error ? error.message : 'Unknown error' };
  }
}

const externalApiService = {
  healthCheck,
  getTankInfo,
  getStationInfo
};

export default externalApiService;