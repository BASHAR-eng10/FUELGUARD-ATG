// "use server"
import { unstable_cache } from 'next/cache'
import { prisma } from '../prisma'

interface AuthData {
  data?: {
    access_token?: string;
    token?: string;
  };
  access_token?: string;
  token?: string;
}

// Configuration
const baseURL = process.env.EXTERNAL_API_URL || 'http://78.189.54.28:3800';
const email = process.env.EXTERNAL_API_EMAIL;
const password = process.env.EXTERNAL_API_PASSWORD;

// Cache key for the auth token
const AUTH_TOKEN_CACHE_KEY = 'external-api-auth-token';
const TOKEN_EXPIRY_MINUTES = 50; // 50 minutes (assuming 1 hour token expiry)

// Store token in database for persistence across serverless invocations
async function storeTokenInDB(token: string, expiresAt: Date) {
  try {
    await prisma.$executeRaw`
      INSERT INTO system_cache (key, value, expires_at, created_at, updated_at)
      VALUES (${AUTH_TOKEN_CACHE_KEY}, ${token}, ${expiresAt}, NOW(), NOW())
      ON CONFLICT (key) 
      DO UPDATE SET 
        value = ${token},
        expires_at = ${expiresAt},
        updated_at = NOW()
    `;
    console.log('üóÑÔ∏è Token stored in database');
  } catch (error) {
    console.warn('Failed to store token in database:', error);
    // Non-fatal error, we can continue without DB storage
  }
}

// Get token from database
async function getTokenFromDB(): Promise<{ token: string; expires: Date } | null> {
  try {
    const result = await prisma.$queryRaw<{value: string, expires_at: Date}[]>`
      SELECT value, expires_at 
      FROM system_cache 
      WHERE key = ${AUTH_TOKEN_CACHE_KEY} 
        AND expires_at > NOW()
      LIMIT 1
    `;
    
    if (result.length > 0) {
      console.log('üóÑÔ∏è Token retrieved from database');
      return {
        token: result[0].value,
        expires: result[0].expires_at
      };
    }
  } catch (error) {
    console.warn('Failed to get token from database:', error);
  }
  
  return null;
}

async function login(email: string, password: string): Promise<string> {
  const response = await fetch(`${baseURL}/auth/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ email, password }),
    cache: 'no-store' // Never cache login requests
  });

  if (!response.ok) {
    throw new Error(`Login failed: ${response.status} ${response.statusText}`);
  }

  const data: AuthData = await response.json();
  console.log('üîç Auth response structure:', JSON.stringify(data, null, 2));

  let token: string | null = null;
  
  if (data?.data?.access_token) {
    token = data.data.access_token;
  } else if (data?.data?.token) {
    token = data.data.token;
  } else if (data?.access_token) {
    token = data.access_token;
  } else if (data?.token) {
    token = data.token;
  }

  if (!token) {
    throw new Error('No valid token found in authentication response');
  }

  // Store token in database for persistence
  const expiresAt = new Date(Date.now() + (TOKEN_EXPIRY_MINUTES * 60 * 1000));
  await storeTokenInDB(token, expiresAt);

  return token;
}

// Cached function to get auth token - uses Next.js caching
const getCachedAuthToken = unstable_cache(
  async (): Promise<string> => {
    console.log('üîê Authenticating with external API (cache miss)...');
    
    if (!email || !password) {
      throw new Error('External API credentials not configured');
    }

    return await login(email, password);
  },
  [AUTH_TOKEN_CACHE_KEY],
  {
    revalidate: TOKEN_EXPIRY_MINUTES * 60, // 50 minutes in seconds
    tags: ['external-api-auth']
  }
);

// Helper function to get authentication token with fallbacks
async function getAuthToken(): Promise<string> {
  try {
    // First try: Check database for existing valid token
    const dbToken = await getTokenFromDB();
    if (dbToken && dbToken.expires > new Date()) {
      console.log('üîë Using token from database');
      return dbToken.token;
    }

    // Second try: Use Next.js cached function (will fetch new token if cache miss)
    console.log('üîÑ Fetching token via Next.js cache...');
    return await getCachedAuthToken();
    
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('‚ùå Authentication failed:', errorMessage);
    throw new Error(`Failed to authenticate with external API: ${errorMessage}`);
  }
}
  
  try {
    const response = await fetch(`${baseURL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        email: email,
        password: password
      }),
      cache: 'no-store' // Don't cache login requests
    });

    if (!response.ok) {
      throw new Error(`Authentication failed: ${response.status} ${response.statusText}`);
    }

    const data: AuthData = await response.json();
    console.log('üîç Auth response structure:', JSON.stringify(data, null, 2));

    // Handle different token response formats
    let token: string | null = null;
    
    if (data?.data?.access_token) {
      token = data.data.access_token;
    } else if (data?.data?.token) {
      token = data.data.token;
    } else if (data?.access_token) {
      token = data.access_token;
    } else if (data?.token) {
      token = data.token;
    }

    if (!token) {
      throw new Error('No valid token found in authentication response');
    }

    // Store token in database for persistence
    const expiresAt = new Date(Date.now() + (TOKEN_EXPIRY_MINUTES * 60 * 1000));
    await storeTokenInDB(token, expiresAt);

    console.log('‚úÖ Authentication successful, token stored');
    return token;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('‚ùå Authentication failed:', errorMessage);
    throw new Error(`Failed to authenticate with external API: ${errorMessage}`);
  }
}

// Helper function to make authenticated requests
async function makeRequest(
  endpoint: string, 
  options: RequestInit = {}, 
  cacheOptions?: { revalidate?: number }
) {
  const token = await getAuthToken();
  
  const url = `${baseURL}${endpoint}`;
  const fetchOptions: RequestInit = {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` }),
      ...options.headers,
    },
    next: {
      revalidate: cacheOptions?.revalidate || 300, // 5 minutes default
    }
  };

  console.log(`üì° API Request: ${options.method || 'GET'} ${endpoint}`);
  
  try {
    const response = await fetch(url, fetchOptions);
    
    console.log(`‚úÖ API Response: ${response.status} ${endpoint}`);
    
    if (!response.ok) {
      if (response.status === 401) {
        console.log('üîÑ Token expired, clearing cache and database...');
        await clearAuthCache();
        throw new Error('Token expired');
      }
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`‚ùå API Error: ${endpoint}`, error);
    throw error;
  }
}

// Public API functions
export async function healthCheck() {
  try {
    if (!email || !password) {
      return {
        status: 'not_configured',
        message: 'External API credentials not configured',
        timestamp: new Date().toISOString()
      };
    }

    await getAuthToken();
    return {
      status: 'connected',
      message: 'External API is accessible and authenticated',
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    return {
      status: 'error',
      message: errorMessage,
      timestamp: new Date().toISOString()
    };
  }
}

export async function getTankInfo() {
  try {
    console.log('üîç Fetching tank info...');
    
    const data = await makeRequest('/ak4tek/tanks/', {
      method: 'GET'
    }, { revalidate: 300 });

    console.log('üîç Tank info response structure:', JSON.stringify(data, null, 2));

    if (data?.data) {
      return data.data;
    }

    throw new Error('Invalid response format from tankinfo API');
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('Error fetching tank info:', errorMessage);
    throw new Error(`Failed to fetch tank info: ${errorMessage}`);
  }
}

export async function getStationInfo() {
  try {
    console.log('üîç Fetching station info...');
    
    const data = await makeRequest('/stationinfo/all', {
      method: 'GET'
    }, { revalidate: 300 });

    console.log('üîç Station info response structure:', JSON.stringify(data, null, 2));

    if (data?.data) {
      return data.data;
    }
    
    throw new Error('Invalid response format from stationinfo API');
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('Error fetching station info:', errorMessage);
    throw new Error(`Failed to fetch station info: ${errorMessage}`);
  }
}

// Clear authentication cache from database and Next.js cache
async function clearAuthCache() {
  try {
    // Clear from database
    await prisma.$executeRaw`
      DELETE FROM system_cache 
      WHERE key = ${AUTH_TOKEN_CACHE_KEY}
    `;
    console.log('üóëÔ∏è Token removed from database');
  } catch (error) {
    console.warn('Failed to clear token from database:', error);
  }
  
  // Clear Next.js cache using revalidateTag
  try {
    const { revalidateTag } = await import('next/cache');
    revalidateTag('external-api-auth');
    console.log('üóëÔ∏è Next.js auth cache cleared');
  } catch (error) {
    console.warn('Failed to clear Next.js cache:', error);
  }
}

export async function clearCache() {
  await clearAuthCache();
  console.log('üóëÔ∏è All auth caches cleared');
}

export async function getCacheStats() {
  try {
    const dbToken = await getTokenFromDB();
    return {
      tokenInDB: !!dbToken,
      tokenExpires: dbToken?.expires,
      tokenValid: dbToken ? dbToken.expires > new Date() : false
    };
  } catch (error) {
    return {
      tokenInDB: false,
      tokenExpires: null,
      tokenValid: false,
      error: 'Failed to check cache stats'
    };
  }
}

// Default export for backward compatibility
const externalApiService = {
  healthCheck,
  getTankInfo,
  getStationInfo,
  clearCache,
  getCacheStats
};

export default externalApiService;

// CommonJS compatibility
module.exports = externalApiService;